{"version":3,"sources":["asset/json/cm.js","router/index.js","page/list.js","App.js","serviceWorker.js","index.js"],"names":["cmSingleCheckList","routes","path","component","state","datalist","inputText","this","setState","temp","map","item","indexOf","console","log","push","length","Paper","IconButton","aria-label","InputBase","placeholder","inputProps","value","onChange","event","target","Button","variant","color","onClick","search","clear","List","index","ListItem","button","ListItemText","primary","Divider","Component","App","route","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6RAQeA,EARS,CACtB,kPACA,gKACA,sJACA,6NACA,6N,iDCKaC,EAPA,CACb,CACEC,KAAM,IACNC,U,4MCWFC,MAAQ,CACNC,SAAU,GACVC,UAAW,I,kEAGXC,KAAKC,SAAS,CACZH,SAAUL,M,+BAGJ,IAAD,OACHS,EAAO,GACXT,EAAkBU,KAAI,SAAAC,GAChBA,EAAKC,QAAQ,EAAKR,MAAME,YAAc,IACxCO,QAAQC,IAAIH,GACZF,EAAKM,KAAKJ,OAGdJ,KAAKC,SAAS,CACZH,SAAUI,IAEuB,GAA/BF,KAAKH,MAAME,UAAUU,QACvBT,KAAKC,SAAS,CACZH,SAAUL,M,8BAKdO,KAAKC,SAAS,CACZF,UAAW,GACXD,SAAUL,M,+BAGJ,IAAD,OACP,OACE,6BACE,kBAACiB,EAAA,EAAD,CAAOd,UAAU,QACf,kBAACe,EAAA,EAAD,CAAYC,aAAW,QACrB,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CACEC,YAAY,qBACZC,WAAY,CAAE,aAAc,sBAC5BC,MAAOhB,KAAKH,MAAME,UAClBkB,SAAU,SAAAC,GACRZ,QAAQC,IAAIW,EAAMC,OAAOH,OACzB,EAAKf,SAAS,CACZF,UAAWmB,EAAMC,OAAOH,WAa9B,kBAACI,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,WACjD,EAAKC,WADT,gBAxBF,WA4BI,kBAACJ,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,WACnD,EAAKE,UADP,iBAIJ,kBAACC,EAAA,EAAD,CAAM9B,UAAU,MAAMgB,aAAW,6BAC9BZ,KAAKH,MAAMC,SAASK,KAAI,SAACC,EAAMuB,GAC9B,OACE,6BACE,kBAACC,EAAA,EAAD,CAAUC,QAAM,GACd,kBAACC,EAAA,EAAD,CAAcC,QAAO,UAAKJ,EAAQ,EAAb,aAAmBvB,MAE1C,kBAAC4B,EAAA,EAAD,gB,GA3EIC,eC0BLC,MArCf,WACE,OACE,kBAAC,IAAD,KACGxC,EAAOS,KAAI,SAAAgC,GAAK,OACf,kBAAC,IAAUA,QCGCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCNNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.29b74ace.chunk.js","sourcesContent":["let cmSingleCheckList = [\n  \"挡煤板的作用是防止采煤机割下的煤(C)A.落到输送机上B.落到输送机内侧C.落到输送机外侧D.伤人\",\n  \"采煤工作面煤层被直接采出的厚度叫(D)A.煤柱B.煤帮C. 煤壁 D.采高\",\n  \"直接进行采掘的煤层暴露面叫( C )A.煤柱B.煤帮C. 煤壁 D.工作面\",\n  \"采高较大或煤层节理发育，煤壁易(B) 可能导致顶板大量下沉。A.冒落 B.片帮C. 跨落D.压垮\",\n  \"在普采工作面内破煤和装煤两个工序 全部由（C）A.转载机 B.三机C. 采煤机来完成 D.工人\"\n]\n\nexport default cmSingleCheckList;","\nimport tList from '../page/list';\n\nconst routes = [\n  {\n    path: \"/\",\n    component: tList,\n  }\n];\n\nexport default routes;","import React, { Component } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport DraftsIcon from '@material-ui/icons/Drafts';\nimport cmSingleCheckList from '../asset/json/cm';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Button from '@material-ui/core/Button';\n\nclass tList extends Component {\n  state = {\n    datalist: [],\n    inputText: ''\n  };\n  componentDidMount() {\n    this.setState({\n      datalist: cmSingleCheckList\n    });\n  }\n  search() {\n    var temp = [];\n    cmSingleCheckList.map(item => {\n      if (item.indexOf(this.state.inputText) > -1) {\n        console.log(item);\n        temp.push(item);\n      }\n    });\n    this.setState({\n      datalist: temp\n    });\n    if (this.state.inputText.length == 0) {\n      this.setState({\n        datalist: cmSingleCheckList\n      });\n    }\n  }\n  clear() {\n    this.setState({\n      inputText: '',\n      datalist: cmSingleCheckList\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Paper component=\"form\">\n          <IconButton aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <InputBase\n            placeholder=\"搜题啦\"\n            inputProps={{ 'aria-label': '搜题啦' }}\n            value={this.state.inputText}\n            onChange={event => {\n              console.log(event.target.value);\n              this.setState({\n                inputText: event.target.value\n              });\n            }}\n          />\n          {/* <IconButton\n            type=\"submit\"\n            aria-label=\"search\"\n          >\n            <SearchIcon onClick={() => {\n              console.log('*******');\n            }} />\n            \n          </IconButton> */}\n          <Button variant=\"contained\" color=\"primary\" onClick={() => {\n              this.search();\n            }}>搜索</Button>\n            &nbsp;&nbsp;\n            <Button variant=\"contained\" color=\"primary\" onClick={() => {\n              this.clear()\n            }}>清空</Button>\n        </Paper>\n        <List component=\"nav\" aria-label=\"secondary mailbox folders\">\n          {this.state.datalist.map((item, index) => {\n            return (\n              <div>\n                <ListItem button>\n                  <ListItemText primary={`${index + 1}: ${item}`} />\n                </ListItem>\n                <Divider />\n              </div>\n            );\n          })}\n        </List>\n      </div>\n    );\n  }\n}\n\nexport default tList;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport routes from '../src/router/index'\n\nfunction App() {\n  return (\n    <Switch>\n      {routes.map(route => (\n        <Route {...route} />\n      ))}\n      {/* <Switch> */}\n      {/* If the current URL is /about, this route is rendered\n          while the rest are ignored */}\n      {/* <Route path=\"/\">\n          <List />\n        </Route> */}\n\n      {/* Note how these two routes are ordered. The more specific\n          path=\"/contact/:id\" comes before path=\"/contact\" so that\n          route will render when viewing an individual contact */}\n      {/* <Route path=\"/contact/:id\">\n          <Contact />\n        </Route>\n        <Route path=\"/contact\">\n          <AllContacts />\n        </Route> */}\n\n      {/* If none of the previous routes render anything,\n          this route acts as a fallback.\n\n          Important: A route with path=\"/\" will *always* match\n          the URL because all URLs begin with a /. So that's\n          why we put this one last of all */}\n      {/* <Route path=\"/\">\n          <Home />\n        </Route> */}\n      {/* </Switch> */}\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   // Route,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}